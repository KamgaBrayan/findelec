package org.jhipster.findelec.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TrajetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajetAllPropertiesEquals(Trajet expected, Trajet actual) {
        assertTrajetAutoGeneratedPropertiesEquals(expected, actual);
        assertTrajetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajetAllUpdatablePropertiesEquals(Trajet expected, Trajet actual) {
        assertTrajetUpdatableFieldsEquals(expected, actual);
        assertTrajetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajetAutoGeneratedPropertiesEquals(Trajet expected, Trajet actual) {
        assertThat(expected)
            .as("Verify Trajet auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajetUpdatableFieldsEquals(Trajet expected, Trajet actual) {
        assertThat(expected)
            .as("Verify Trajet relevant properties")
            .satisfies(e -> assertThat(e.getVilleDepart()).as("check villeDepart").isEqualTo(actual.getVilleDepart()))
            .satisfies(e -> assertThat(e.getVilleArrivee()).as("check villeArrivee").isEqualTo(actual.getVilleArrivee()))
            .satisfies(e -> assertThat(e.getDateDepart()).as("check dateDepart").isEqualTo(actual.getDateDepart()))
            .satisfies(
                e ->
                    assertThat(e.getNombrePlacesDisponibles())
                        .as("check nombrePlacesDisponibles")
                        .isEqualTo(actual.getNombrePlacesDisponibles())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajetUpdatableRelationshipsEquals(Trajet expected, Trajet actual) {
        assertThat(expected)
            .as("Verify Trajet relationships")
            .satisfies(e -> assertThat(e.getUtilisateur()).as("check utilisateur").isEqualTo(actual.getUtilisateur()));
    }
}
